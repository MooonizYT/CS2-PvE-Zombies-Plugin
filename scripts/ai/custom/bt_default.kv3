<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	config = "scripts/ai/custom/bt_config.kv3"
	root =
	{
		type = "decorator_bot_service"
		memory_to_expire =
		[
			{
				key = "ShortTermAttackMemory"
				time = 0.5
				distance = 0
			},
			{
				key = "ShortTermDamageMemory"
				time = 0.5
				distance = 0
			},
			{
				key = "ShortTermAreaDamageMemory"
				time = 3
				distance = 0
			},
			{
				key = "ShortTermInvestigateMemory"
				time = 10
				distance = 300
			},
			{
				key = "LongTermMemory"
				time = 35
				distance = 1000
			},
			{
				domain = "AllBots"
				key = "Threats"
				time = 10
				distance = 0
			}
		]
		tagged_entities_to_expire =
		[
			"EngagedEntities"
		]
		child =
		{
			type = "decorator_buy_service"
			output = "ShouldBuy"
			child =
			{
				type = "parallel"
				children =
				[
					{
						type = "decorator_repeat"
						child =
						{
							type = "parallel"
							children =
							[
								// memorize enemies through vision
								{
									type = "subtree"
									file = "scripts/ai/modules/bt_memorize_enemies_vision.kv3"
									name = "MemorizeEnemiesVision"
								},
								// memorize noises happening right now
								{
									type = "subtree"
									file = "scripts/ai/modules/bt_memorize_noises.kv3"
									name = "MemorizeNoises"
								},
								// record the nearest memorized event to investigate
								{
									type = "subtree"
									file = "scripts/ai/modules/bt_memorize_nearest_investigation.kv3"
									name = "MemorizeNearestInvestigation"
								},
								// memorize incoming grenades
								{
									type = "subtree"
									file = "scripts/ai/modules/bt_memorize_area_damage_grenades.kv3"
									name = "MemorizeAreaDamageGrenades"
								},
								// memorize incoming damage
								{
									type = "subtree"
									file = "scripts/ai/modules/bt_memorize_damage.kv3"
									name = "MemorizeDamage"
								},
								// memorize threats
								{
									type = "subtree"
									file = "scripts/ai/custom modules/bt_memorize_threats.kv3"
									name = "MemorizeThreats"
								},
								// memorize whether we're standing on damaging area
								{
									type = "subtree"
									file = "scripts/ai/modules/bt_memorize_area_damage_current.kv3"
									name = "MemorizeAreaDamageCurrent"
								}
							]
						}
					},
					{
						type = "decorator_repeat"
						child =
						{
							type = "selector"
							children =
							[
								// Else: face the damage source if we're taking damage
								{
									type = "decorator_sensor"
									entity_type_filter = "DAMAGE"
									output = "Damage"
									priority = 0
									child =
									{
										type = "condition_is_empty"
										input = "Damage"
										negated = 1
										child =
										{
											type = "action_aim"
											input = "Damage"
											acquire_only = 1
										}
									}
								},
								// Else: attack if we see an enemy (with knife)
								{
									type = "subtree"
									file = "scripts/ai/custom modules/bt_attack_with_knife.kv3"
									name = "AttackWithKnife"
								},
								// Else: attack if we see an enemy (without knife)
								{
									type = "subtree"
									file = "scripts/ai/custom modules/bt_attack.kv3"
									name = "Attack"
								},
								{
									type = "subtree"
									file = "scripts/ai/custom modules/bt_clear_threats_within_fov.kv3"
									name = "ClearThreatsWithinFov"
								},
								{
									type = "subtree"
									file = "scripts/ai/custom modules/bt_select_nearby_threat.kv3"
									name = "SelectNearbyThreat"
								},
								// Else: Heal if needed
                                {
                                    type = "subtree"
                                    file = "scripts/ai/modules/bt_heal_if_needed.kv3"
                                    name = "HealIfNeeded"
                                },
                                // Else: investigate the closest memorized event
                                {
                                    type = "subtree"
                                    file = "scripts/ai/modules/bt_investigate_closest_memorized_event.kv3"
                                    name = "InvestigateClosestMemorizedEvent"
                                },
								// Else: hunt
                                {
                                    // sequencer: evaluate first to last child, in order
                                    type = "sequencer"
                                    children =
                                    [
                                        {
                                            type = "action_equip_weapon"
                                            weapon = "weapon_knife"
                                        },
										{
                                            type = "action_move_to"
											destination = "5699.39 32.80 31.39" // Go to Cabin
											movement_type = "BT_ACTION_MOVETO_RUN"
											route_type = "BT_ACTION_MOVETO_FASTEST_ROUTE"
											threat = "NearestThreatMemory"
											auto_look_adjust = 1
                                        }
                                    ]
                                }
							]
						}
					}	
				]
			}
		}
	}
}
